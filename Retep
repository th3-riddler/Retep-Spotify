#!.venv/bin/python3
from dotenv import load_dotenv
import os, sys
import spotipy
from spotipy.oauth2 import SpotifyOAuth

load_dotenv()
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def change_volume(sp, volume):
    device = get_active_device_id(sp)
    try:
        sp.volume(int(volume), device_id=device)
    except spotipy.exceptions.SpotifyException:
        pass

def next_track(sp):
    device = get_active_device_id(sp)
    try:
        sp.next_track(device_id=device)
    except spotipy.exceptions.SpotifyException:
        pass

def previous_track(sp):
    device = get_active_device_id(sp)
    try:
        sp.previous_track(device_id=device)
    except spotipy.exceptions.SpotifyException:
        pass

def pause_track(sp):
    device = get_active_device_id(sp)
    try:
        sp.pause_playback(device_id=device)
    except spotipy.exceptions.SpotifyException:
        pass

def play_track(sp):
    device = get_active_device_id(sp)
    try:
        sp.start_playback(device_id=device)
    except spotipy.exceptions.SpotifyException:
        pass

def toggle_play_pause(sp):
    device = get_active_device_id(sp)
    current_playback = sp.current_playback()
    try:
        if current_playback['is_playing']:
            sp.pause_playback(device_id=device)
        else:
            sp.start_playback(device_id=device)
    except spotipy.exceptions.SpotifyException:
        pass

def get_volume(sp):
    devices = sp.devices()
    for device in devices['devices']:
        if device['is_active'] and device['supports_volume']:
            return device['volume_percent']
    return -1

def get_active_device_id(sp):
    devices = sp.devices()
    for device in devices['devices']:
        if device['is_active']:
            return device['id']
        
def get_song_name(sp):
    current_playback = sp.current_playback()
    if current_playback is None:
        return "???"
    return current_playback['item']['name']

def get_artists_name(sp):
    current_playback = sp.current_playback()
    artists = ""
    if current_playback is None:
        return "???"
    for artist in current_playback['item']['artists']:
        artists += artist['name'] + ""
    return artists[:-2]

def print_top_tracks(top_tracks):
    """
    Print the top tracks of the user
    """
    for idx, track in enumerate(top_tracks['items']):
        print(f"{idx + 1:2}  {track['name']} - {track['artists'][0]['name']}")

def print_devices(devices):
    """
    Print the devices that are available to play music
    """
    for device in devices['devices']:
        print(f"id:                 {device['id']}\n"
              f"is_active:          {bcolors.OKGREEN if device['is_active'] else bcolors.FAIL}{device['is_active']}{bcolors.ENDC}\n"
              f"is_private_session: {bcolors.OKGREEN if device['is_private_session'] else bcolors.FAIL}{device['is_private_session']}{bcolors.ENDC}\n"
              f"is_restricted:      {bcolors.OKGREEN if device['is_restricted'] else bcolors.FAIL}{device['is_restricted']}{bcolors.ENDC}\n"
              f"name:               {bcolors.BOLD}{device['name']}{bcolors.ENDC}\n"
              f"supports_volume:    {bcolors.OKGREEN if device['supports_volume'] else bcolors.FAIL}{device['supports_volume']}{bcolors.ENDC}\n"
              f"type:               {bcolors.OKCYAN}{device['type']}{bcolors.ENDC}\n"
              f"volume_percent:     {device['volume_percent']}\n")

def main(param):


    if not os.getenv("SPOTIFY_CLIENT_ID") or not os.getenv("SPOTIFY_CLIENT_SECRET") or not os.getenv("SPOTIFY_REDIRECT_URI"):
        print("Please set the SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET and SPOTIFY_REDIRECT_URI environment variables")
        sys.exit(1)

    if len(sys.argv) == 1:
        print("Please provide an argument")
        sys.exit(2)

    scope = "user-library-read,user-top-read,user-read-playback-state,user-modify-playback-state,user-read-currently-playing,user-read-private,user-read-email"

    sp = spotipy.Spotify(auth_manager=SpotifyOAuth(client_id=os.getenv("SPOTIFY_CLIENT_ID"),
                                                client_secret=os.getenv("SPOTIFY_CLIENT_SECRET"),
                                                redirect_uri=os.getenv("SPOTIFY_REDIRECT_URI"),
                                                scope=scope))
    
    if param.next:
        next_track(sp)
    elif param.previous:
        previous_track(sp)
    elif param.v:
        change_volume(sp, param.v)
    elif param.pause:
        pause_track(sp)
    elif param.play:
        play_track(sp)
    elif param.toggle:
        toggle_play_pause(sp)
    else:
        print("Invalid argument")


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description='Spotify controller')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-n', '--next', action='store_true', help='Skip to the next track')
    group.add_argument('-p', '--previous', action='store_true', help='Back to the previous track')
    group.add_argument('-v', type=int, help='Set the volume to the given value')
    group.add_argument('--pause', action='store_true', help='Pause the current track')
    group.add_argument('--play', action='store_true', help='Play the current track')
    group.add_argument('--toggle', action='store_true', help='Toggle play/pause')
    args = parser.parse_args()

    main(args)